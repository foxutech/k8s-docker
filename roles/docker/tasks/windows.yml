---
# Azure win already contains Docker 18.0.3

# Azure win Docker doesn't run under docker group
# - name: Add telegraf user to docker group
#   win_user:
#     name: telegraf
#     groups: docker
#     groups_action: add

#
# TODO: logrotate for Windows
#
# - name: Configure logrotate
#   blockinfile:
#     path: /etc/logrotate.d/docker
#     create: yes
#     block: |
#       /var/lib/docker/containers/*/*.log {
#         rotate 7
#         daily
#         compress
#         missingok
#         delaycompress
#         copytruncate
#       }
#     owner: root
#     mode: 0644

- name: Check if filebeat is installed
  win_stat:
    path: "C:\\ProgramData\\filebeat\\conf.d"
  register: filebeatconf

- name: Configure filebeat
  win_template:
    src: "{{ role_path }}/templates/win-filebeat.yml.j2"
    dest: "C:\\ProgramData\\filebeat\\conf.d\\docker.yml"
  when: filebeatconf.stat.exists and filebeatconf.stat.isdir == true
  notify:
    - restart filebeat

- name: Check if telegraf is installed
  win_stat:
    path: "C:\\ProgramData\\chocolatey\\lib\\telegraf\\conf.d"
  register: telegrafconf

- name: Configure telegraf
  win_template:
    src: "{{ role_path }}/templates/win-telegraf.conf.j2"
    dest: "C:\\ProgramData\\chocolatey\\lib\\telegraf\\conf.d\\telegraf.conf"
  when: telegrafconf.stat.exists and telegrafconf.stat.isdir == true
  notify:
    - restart telegraf

- name: update docker configuration with the data directory
  win_template:
    src: "{{ role_path }}/templates/docker-daemon.json.j2"
    dest: "C:\\ProgramData\\docker\\config\\daemon.json"
  notify: restart docker
  when: DOCKER_DATA is defined

- name: Register docker in consul
  win_shell: |
      $json = @'
      {
          "name": "docker",
          "tags": ["{{ ENVIRONMENT }}", "{{ APPLICATION }}", "{{ BAMBOO_AGENT_SIZE }}", "{{ BAMBOO_AGENT_ENV }}"],
          "checks": [
              {
                  "args": ["C:\\ProgramData\\bin\\check_service.bat", "Docker"],
                  "interval": "1m"
              }
          ]
      }
      '@
      Invoke-RestMethod -Method Put -Uri "http://localhost:8500/v1/agent/service/register" -Body $json -ContentType "application/json"
  ignore_errors: True
